#!/bin/bash
#
# This is a companion script for Tilde's .gitconfig.
#
# Inspired by Gary Bernhardt's "experimental git log":
# https://github.com/garybernhardt/dotfiles/commit/62a932b9
# https://github.com/garybernhardt/dotfiles/commit/17e89bf4

# Return the exit status of "git log" (assuming "sed" always has an exit status
# of 0).
set -o pipefail;

# Format the log as multicolour lines highlighting the parts I care about most.
format_concise_parts=(
	# Abbreviated commit hash. E.g., "b4db4be".
	'%C(yellow)%h%C(reset) '

	# Relative date (age). E.g., "3 days ago". Abbreviated by "sed" below.
	'%C(blue)(%ar)%C(reset) '

	# Subject. E.g., "Homepage: add Frobnitz widget".
	'%s '

	# Author name. E.g., "Jan Moesen".
	'%C(blue)(%an)%C(reset)'

	# Branches. (Always wrapped in parentheses and preceded by a space.)
	# E.g., "(HEAD, origin/master, origin/frobnitz)
	'%C(bold yellow)%d%C(reset)'
);
printf -v format_concise '%s' "${format_concise_parts[@]}";

# If our stdout is being piped, lose the colour. Otherwise, force "git log" to
# use "--color=always" because we pipe its stdout ourselves. (Which would make
# Git always turn off colours when in "auto" mode.)
git_color_option=always;
if [ -t 1 ]; then
	if [[ " $* " =~ \ --color=never\  ]] || [ "$(git config color.ui)" = 'never' ]; then
		git_color_option=never;
	else
		git_color_option=always;
	fi;
else
	if [[ " $* " =~ \ --color(=always)?\  ]] || [ "$(git config color.ui)" = 'always' ]; then
		git_color_option=always;
	else
		git_color_option=never;
	fi;
fi;
if [ "$git_color_option" = 'never' ]; then
	shopt -s extglob;
	format_concise="${format_concise//%C(+([^)]))}";
fi;

git log --color="$git_color_option" --pretty="format:$format_concise" -n 20 "$@" | perl -p -e '
	# Change "3 weeks ago" into "3 weeks".
	s/^([^)]*) ago\)/\1)/;

	# Abbreviate the time units.
	s/^([^)]*) (s)econd(s?)\)/\1\2)/;
	s/^([^)]*) (m)inute(s?)\)/\1\2)/;
	s/^([^)]*) (h)our(s?)\)/\1\2)/;
	s/^([^)]*) (d)ay(s?)\)/\1\2)/;
	s/^([^)]*) (w)eek(s?)\)/\1\2)/;
	s/^([^)]*) (mon)th(s?)\)/\1 \2)/;
	s/^([^)]*) (y)ear[^)]*\)/\1\2)/;

	# Use at least two digits before the time unit for nicer alignment
	# (until there are commits older than nine years). Of course, because of
	# "mon" for "months", alignment is off for old-ish commits.
	s/\(([0-9])([^0-9 ])/ (\1\2/;
' | $(git var GIT_PAGER);
echo ""
